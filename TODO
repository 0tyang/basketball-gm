BEFORE 3.0.0-beta.2
-------------------

add another color for bar graph (for expenses)
move most db functions into core.whatever. db should just be about initializing/upgrading
db version upgrades
  see https://github.com/superfeedr/indexeddb-backbonejs-adapter/blob/master/backbone-indexeddb.js
how to deal with a team that drops below 5 active players, factoring in injuries?
  should allow them to exceed roster limit while injury exists
  should not allow play when below 5
  should use same logic/functions as core.season that checks on new season.
    first, add support for auto-add players when AI teams are below limit (in season.js)
bbgmPing should only work in production
  make sure it still works next time i update play.basketball-gm.com
give bbgm website its own version of bootstrap (only with components needed)
display league/season counter on basketball-gm.com splash page
update formulas
  hype
    increase/decrease a lot for discrete events
      when a player joins/leaves roster, increase/decrease hype somehow proportional to ovr and pot
  nationalTvRevenue
    base on g.nationalTvContractAmount, for now a constant
  localTvRevenue
    for now, just make it a function of attendance
    eventually, t.seasons[0].tvContract
knobs to control team finances
  use an object to store budget items in database. it's too messy as is.
    any other db updates?
  team finances view
    on POST
        recalculate budget ranks (function in core.finances?)
    template
      handlebars helper for form DRY
      minimum width for form column
  updating expenses
    spread out spending over 82 regular-season games, in core.game, based on budget items
    expense and revenue rank updating should happen somewhere in core.game where all the teams are loaded already, if possible
  how should changes in budget effect things?
    performance is based on cumulative (this year) rank relative to other teams
      have functions in core.finances to calculate and cache these ranks (also ticketPrice, pop, etc), so it can be done daily during the regular season, or when the user makes a change
  move ticket price to team object rather than making it a constant
    it's already there. but g.ticketPrice needs to be replaced
    post-revenue-calculation attendance should depend on ticket price. so should hype, but only slightly
  scouting budget - decrease "fuzz" added to displayed ratings
    fuzz
      for each player, calculate a randn(0, scoutingPaidRank/10) with max/min of +/- 5
      calculate a new one each year and add it to 1/2 of the previous one
      displayed "skills" should include fuzz. ones used in gameSim shouldn't.
  coaching budget - influence player development
  health budget - influence injuries, both rate and severity (rate is defined in core.gameSim, severity is defined in core.player.injury)
  facilities budget - influence free agent demeanor, player development
  stadium budget - influence attendance
  new phase updating of variables
  initial values for *Budgets and ticket prices
    base on population
  AI updating of *Budgets and ticket prices
    maybe not necessary at this stage?
negotiation is annoying
  come up with an "anger meter" to display the odds of the player demanding more
    initialize with some value based on if it's a resigning or not, and wins the previous season
  shouldn't be so aggressive/adversarial
  make calculation of demand to display DRY - or any change, be careful
make sure finances are reasonable

DATABASE CHANGES since 3.0.0-beta
---------------------------------

ON meta DB UPGRADE show a message explaining new features!!

added to seasonAttributes for each team:
  hype: number,
  pop: number,
  tvContract: {},
  revenues: {}
  expenses: {}
  payrollEndOfSeason: number
added to root of each team: budget
removed "cost" and "revenue" from seasonAttributes
changes to retiredPlayers, but that's just removing stuff that isn't needed anymore, so no problem
player
  added "injury", "awards", and "contracts"
  "college" is an empty string
  draft* properties are now inside another object
    now includes pot, ovr, and skills
  bornYear and bornLoc are born.year and born.loc
  contract to object (also in releasedPlayers)

MANUAL CHANGES TODO since 3.0.0-beta
------------------------------------

BEFORE 3.0.0
------------

any raw data files should go in the data folder, ideally with a script to convert them to however they're used here
database changes
  KEEP TRACK OF THESE CHANGES so i can upgrade
  should money stored be in millions? are thousands actually outputted anywhere? would there be a loss of accuracy?
  add activeYears multientry like statsTids use for:
    league leaders
    stats
    ratings
  message from the owner every year
    warning about being fired, or congratulations
  big picture gameplay
    some way to actually win/lose the game
      get fired by owner if X
    final score, hall of fame
      influenced by size of city (see: difficulty in views.newLeague)
    some consequence of having negative cash
gameSim
  rename compositeRating to compositeRatings (or something better)
    other plural issues in gameSim
  playing time not adding up to 240?
  do some kind of profiling, see if i can speed it up
    any way to speed up PER? maybe break it up into smaller functions so they can be profiled
    do i need all the player composite ratings?
    do i need all the team composite ratings?
    how does performance change/degrade as the years go on?
db.getPlayers
  way way way too messy
  rename to helpers.filterPlayers? or player.filter and player.filterAll?
    make db.getTeams consistent with this
  use for other access of players "playersAll"
  the special case attributes should generally be moved directly into the database?
  Replace showNoStats with a check of stats.length in db.getPlayer, at least in some cases? API is messy
trade refactoring
  validateSavedTids crap should be in trade.js.
  trade.summary stuff should be automatic and stored in tradeStore
internationalization
  league dashboard rankings should say 1st, 2nd, 3rd rather than 1th, 2th, 3th
  http://requirejs.org/docs/api.html#i18n
in lock functions, update g from database before using any potentially sensitive values
  or should these g.whatever variables be set at all if they're sensitive? lid doesn't change obviously, but the others?
move to new window button, like gmail, that will open a view in a new window with a minimal UI
  only the icon should be clickable, not the area above and below
team history view needs more love
  dropdown for other teams
AI modules that contain functions which are called to determine actions
  mode: rebuild or contend
  things to regulate...
    draft picks
    signing free agents
    resigning players
    budget items (like from team finances view)
notifications (and log) from top right to display log of key events
  game results from user's team
  players retiring from user's team
  league champions
  trades
  free agent signings
show an option to upload a data file for rosters
  nba roster
    define file format for external player sources
    derive from stats, somehow?
    nba player potential ratings
    if necessary, scale everything down a bit to make it comparable to normal players
    free agents are way overrated. is this roster file legit?
player finder
  search by stats or ratings
  trade for button, or sign button if free agent
customize which columns are shown in roster view (and possibly other summary views like trade, free agent, etc)
  http://datatables.net/extras/colvis/
PER
  slow, particularly after multiple seasons?
  how to deal with players traded mid-season?
    reevaluate this in general. stats don't seem to be showing after a trade in roster view and player view.
  use for awards, contracts
some UI showing the state of the team's synergy. maybe like an advisors screen that suggests what kind of player is needed to improve synergy
  also can respond to budget changes
show record (w-l) on roster view - make it more like a summary, as in basketball-reference
  playoff results
  payroll
  anything else?
more handlebars helpers for things like...
  team dropdown
  season dropdown
too easy to do the "be bad, get draft picks, keep payroll low, sign free agents, be good" pattern
  draft lottery
    do a dramatic presentation?
    increase hype for teams that exceed expectations
  free agents are less willing to sign with bad teams
  user can't just sign all the free agents before AI teams
trades
  draft picks
  cash
  allow trades to go over the roster limit, but show a warning. also factor into AI logic that they would have to drop a player
go through future list
  anything that should be here?
  keep in mind db changes..
DataTables - fix default sort order on column click
  text should be asc, numeric should be desc (except draft picks)
  http://datatables.net/ref#asSorting will work. maybe pass it as an option to bbgm_datatable
  but can it be set globally, based on column type? can have ui.datatable automatically read columns and figure it out?
more tests
  https://github.com/gotwarlost/istanbul
  https://github.com/metagriffin/indexeddb-js can i improve this and run tests outside of browser?
like on team finances page, anywhere else to add help popups?
  should this be abstracted rather than just inline in views?
  inline anything from the manual?
tweak gameSim for stats again

FUTURE (after 3.0.0)
--------------------

jslint errors
  currently just "Don't make functions within a loop." which should all be fixed eventually
more sophisticatedrealtime data binding/updating
  one usability advantage would be keeping help popups, dropdown menus, etc. open even as the content refreshes.
  ember.js
    data binding
    uses handlebars
  knockoutjs is too flaky. try just a naive approach first, and use something better later
    try again?
  angularjs
    seems nice and widely used. would need to build some kind of signal system on top of this, basically to update the UI data variables from indexeddb when appropriate
Web workers
  don't seem to actually help performance. maybe help responsiveness
  benchmark?
  would it be worth it to parallelize advstats?
boxplots for shot location stats, plus comparison to NBA data
import/export stuff
  online "locker" that you can sync saved games to
  https://unhosted.org/adventures/7/Adding-remote-storage-to-unhosted-web-apps.html
  data urls don't work with more than ~1 MB. downloadifydoesn't seem to work with more than several MBs of data. until a better solution comes (online sync?), wait.
  league names
    "Edit" button between "Export" and "Delete" - set in leaguesStore and gameAttributes
      move delete/edit/export under one button, "manage". have the 3 buttons pop out in place when you hit manage, then it functions as it does now. popped buttons can be colored too, then
  import league
    ignore old lid
other advanced stats
  WS - http://www.basketball-reference.com/about/ws.html requires Basketball on Paper - http://www.sports-reference.com/cbb/about/ws.html is simpler
  +/- and other stats needed to calculate above - track in game
  APM?
hitting the phase twice shouldn't be possible. but if i, for instance, hit "until preseason" twice quickly, i skip a year
  maybe have something like lock.phaseChangeInProgress? but some timeout would be needed to reset
worth it to switch to closure library? http://stackoverflow.com/questions/10782612/what-is-the-sturdiest-way-to-get-the-closure-compilers-type-safety-together-wit
roster size check on new season
  cpu teams with < 5 players should automatically sign free agents
moving to other cities
expansion teams (add population growth, expand when certain conditions are met)
team finances view
  compare bar graphs against league averages?
different size stadiums, building new stadiums
tv revenue as a variable
  local tv contract - $10 million
    base on tvContractAmount, tvContractExp
    will be a deal from 3 to 5 years in length
    based on...
      region population
      "hype"
      random noise
      "random event" - competition between two networks, Sports TV and The Basketball Channel
    when renegotiating and really bad, the guy pretends not to know you - "Atlanta Herons? Is that the team from the Mexican/Canadian/Arena/Indoor/Xtreme Volleyball/Soccer/Tennis/Racing/Curling/MudWrestling League?"
stat views
  add team dropdown to ratings and stats views - but should this refresh the view, or just filter the DataTable?
    could use something like http://www.datatables.net/extras/thirdparty/ColumnFilterWidgets/DataTables/extras/ColumnFilterWidgets/ to also filter on positions
  playoff/regular season toggle in team/player stats, league leaders
  player stats: toggle to only show players > 2000 minutes http://www.nba.com/leader_requirements.html
  per 36 stats in team/player stats view, league leaders
    add a dropdown (maybe make the dropdown handling code more general?)
bootstrap 2.3
https://github.com/nprapps/app-template
player stats
  how to handle aggregating stats for players who played for more than one team in a season? add them all up in ps in db.getPlayers
    should be an option, somehow. Possible desired cases:
      for roster, want just a player's stats with this team this season
      for player stats view, want total among all teams for one season
      for player view, want separate rows in careerStats without fucking up totals (including PER)
refactor views.js
  IS IT WORTH DOING THIS BEFORE SWITCHING TO something like knockout?
  where to call beforeleague/nonleague? can this be automatic?
  how to structure?
    separate "init" and "update" functions or whatever?
    meta-views for similar views?
    modularize and build testable functions that generate the data for the UI
trading block
race conditions associated with callbacks when passing around transactions
  any put/add/update does not guarantee it's finished until the transaction finishes. but letting transactions finish is slow.
contract negotiation
  add free agent to the end of roster
eliminate jquery UI dependency? it's only used for roster reordering currently
real calendar
  player.injury.gamesRemaining
core.gameSim.updateSynergy should produce continuous output
  no big difference between a 80 rating and 79 rating, or whatever

---

g = require("globals"); g.dbl.transaction("players").objectStore("players").get(184).onsuccess = function (event) { console.log(event.target.result); };

g = require("globals"); g.dbl.transaction("teams").objectStore("teams").get(3).onsuccess = function (event) { console.log(event.target.result.seasons[0]); }
g = require("globals"); g.dbl.transaction("releasedPlayers").objectStore("releasedPlayers").getAll().onsuccess = function (event) { console.log(event.target.result); }

g.dbl.transaction("gameAttributes").objectStore("gameAttributes").getAll().onsuccess = function (event) { console.dir(event.target.result); };

---






# Pre-JavaScript TODO

player view
  next, previous buttons (also active on left/right arrows)
  link to team roster if player is on a team
  for retired players, either don't show ratings, or show ratings from best year

roster
  highlight handle on hover, like button
  "trade for" only sensitive when trades are allowed

Client-side game simulation
  Robustness of javascript code
    g.phase == 3 in league_views might introduce race condition
    validate data from client?
    make sure play menu doesn't ever get stuck - some kind of timeout

play button requirements
  colors - is this a good idea?
    green: move to new phase
    blue: play games
    red: other immediate action

make validate_season work correctly

include sidebar(s) showing all relevant information, plus make that stuff generated by a separate function so it can eventually be kept static as JS updates other content

grep for # links: grep -R --include="*.html" '<a href="#">' .

security
  csrf protection
    http://flask.pocoo.org/docs/security/#cross-site-request-forgery-csrf
    http://packages.python.org/Flask-SeaSurf/
    http://flask.pocoo.org/snippets/3/
    even for ajax https://docs.djangoproject.com/en/1.2/releases/1.2.5/#csrf-exception-for-ajax-requests

playoffs
  on playoffs start, automatically switch to playoffs view

# Then

trades
  allow trades that go over roster limit, but require players to be cut or traded to meet limit before game simulation continues

self-contained game simulation code, to allow other people to hack on it easily. automatically make charts and stuff.

warning when window is closed and game simulation is in progress
  http://stackoverflow.com/questions/1244535/alert-when-browser-window-closed-accidentally
  https://developer.mozilla.org/en/DOM/window.onbeforeunload

abstract opposing team AI: make it a class with various methods to determine actions at different time points

game log
  pushstate for individual box scores as well as teams and seasons, somehow?

# BELOW IS OLD STUFF

Minor bugs:

Don't allow sort from first column of trade window

---

======
FUTURE
======

GAMESIM
-------
take all ratings into account
  energy, etc
blocks, assists (maybe other things) should not be so evenly distributed

UI
--
in team stats tab, allow toggle to show opponent stats

NBA
---
real salary cap rules: http://en.wikipedia.org/wiki/NBA_Salary_Cap
real contract rules (max/min, etc.)
allow contracts that aren't the same $ every year
team and player options
releasing players - see the salary cap wiki page for complicated rule
trading deadline

AI (NON-GAMESIM)
----------------
trade
  AI teams trade with each other
  opponent GM trade AI based on their team's status: contending or rebuilding
  record player value for contending and rebuilding teams in player_attributes, so opposing GMs can more easily suggest trades (i.e. "i'll make the deal if you throw in X")
  Feedback from trades (way off, that's close, etc)
  "Oh, you again?" after failed trade attempts
  AI teams should be aware of contract lengths and the implications thereof
AI teams release/buy out players to sign a better free agent

FEATURES
--------
opponent GM trade AI based on their team's status: contending or rebuilding
multi-team trades... how can i make a good UI for that?