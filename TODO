main todo
- contract negotiation
  - finish contractNegotiation. Implement callbacks to run the rest of the negotiation view, as necessary
  - test all the error conditions and make sure callbacks are appropriately called (unit tests?)
- jslint --plusplus --predef $ --predef Davis --predef requirejs --predef define --predef window --predef document --predef localStorage --predef IDBKeyRange --predef IDBTransaction --predef g --predef c js/core/draft.js
  - http://stackoverflow.com/questions/7425147/jslint-error-somefunction-was-used-before-it-was-defined
  - http://stackoverflow.com/questions/6744692/jslint-should-we-tolerate-misordered-definitions
    - http://javascript.crockford.com/code.html
  - http://stackoverflow.com/questions/806163/jslint-using-a-function-before-its-defined-error
- resigning old players
  - negotiationList
- new season
  - add rows to stats in DB as is done for playoffs
- make sure all the existing views work with multiple seasons, as they used to
- other views
- reassess how money is stored (ones, thousands, millions?)
strategic issues
- is localStorage fast enough for game_attributes, and possibly other stuff, like trades and contract negotiation?
- refactor and make sure i'm doing things correct as far as modules, namespaces, documentation, style, etc.
  - What will replace the AJAX calls? Just call api.whatever function directly and have it do the jQuery crap
- speed things up by combining transactions

---

How should I handle in-league database? One big transaction?

---

BUGS

ratings should all be integers before being saved
playoff teams aren't being set in exactly the right order

---

PORTING NOTES:

team_attributes.playoffs is now team.made_playoffs
template loop count - how?
- conf rankings in standings
- class="separator"
  - box score (top 5)
  - standings (top 8)
view_season can be made just season because of handelbars' scoping
startingSeason should be stored so later years can have different values
at some point, go through the indexeddb code. factor out common patterns into a library. combine transactions where appropriate
make sure all indexes are actually used. otherwise they're just making it slower for nothing
== to ===

---

POLISH FEATURES


roster view
- past season: go based on players.stats.tid
- auto sort button
- make sure teams dropdown works
- trade for button
- release button
- buy out button
- row handle is too skinny - why?
draft
- draft history view

---

test deep index stats.tid, stats.season: {pid, stats: {tid, season, pts, reb, ...}}

League schema: teamStats and playerStats refer to totals that will be divided by numGames to get averages

players = {playerAttributes, ratings: {playerRatings}, stats: {season, playoffs=Bool, numGames, playerStats}}
Index: *pid, tid, ratings.season, stats.tid, stats.season, stats.playoffs

teams = {teamAttributes, numGames, stats: {playoffs=Bool, teamStats}}
Index: tid, cid, did, season, stats.playoffs

games =  {gid, season, teamStatsForIndividualGame, playerStatsForIndividualGam}
Index: *gid, tid, season
- can tid be an array so that gid can be unique? can i index on an array?

playoffSeries = {season, currentRound, series: [[{}, ...], ...]}
- first row is for round, second row is for series, just like the series object in views.playoffs

schedule = {schedule}

conferences, divisions = simple global data structures

Querying based on multiple indexes: https://github.com/philikon/queryIndexedDB
Try that first, as it looks simple. If it doesn't work, try: http://linq2indexeddb.codeplex.com/ http://www.kristofdegrave.be/2012/05/using-linq-to-indexed-db.html
CAN EITHER OF THESE HANDLE JOINS? Intersection and Union in the first, what about second?

var teamStore = dbm.transaction("teams").objectStore("teams");
request = Index('did').eq(2).getAll(teamStore)
request.onsuccess = function (event) {
    console.log(request.result);
}

var dbConfig = {};
dbConfig.version = 1;
var db = window.linq2indexedDB("meta", dbConfig, true);
db.linq.from("leagues").select().then(function(data){
	console.log("Selected " + data.length + " items");
	console.log(data);
});

---

update: http://www.javasscrypt.com/html5/web-sql-db-vs-indexeddb/
tranasctions: http://blog.nparashuram.com/2011/11/indexeddb-apis-javascriptnext.html        http://stackoverflow.com/questions/10484965/how-can-i-put-several-requests-in-one-transaction-in-indexeddb
joins: http://blog.oharagroup.net/post/16394604653/a-performance-comparison-websql-vs-indexeddb        http://hacks.mozilla.org/2010/06/comparing-indexeddb-and-webdatabase/

handlebars templates -f js/templates.js

TODO:
only need handlebars.runtime.js
merge game_attributes into league table of meta database
