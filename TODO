# To acquire parity with the GTK version and be good enough to share:

Client-side game simulation
- REFACTOR core.game. GOALS:
  - support both client-side and server-side game simulation, somehow
  - break up sim_wrapper into smaller functions
  - sim_wrapper should be used just for the server-side simulations, but all game logic should be factored out into smaller functions that can be used to create equivalent infrastructure for client-side simulations
  - Also, somewhere in here, think about how to set the play status and menu correctly in both cases
- 2: implement client-side, with an option to enable or disable. RETAIN BOTH!
  - General idea
    - Set lock
    - Send all the first day's games, and all the teams *that play in those games*, to the browser
    - Set a timeout (col in schedule table?)
    - when you recieve results from the browser (all at once, for a day)
      - if it's not timed out:
        - write to DB
        - send back more games to simulate, or unset lock
    - If no response after timeout expires, delete timeout, then unset lock
  - Current status
    - Game simulation actually works, but it needs work.
- 2.5: fix javascript
  - http://bonsaiden.github.com/JavaScript-Garden/
    - for loops hasOwnProperty
    - Namespaces "/A common problem of having only one global namespace" "In order to protect code against a possible overwritten undefined variable, a common technique used is to add an additional parameter to an anonymous wrapper that gets no argument passed to it."
      - just copy what jquery does
    - "For the best performance, it is recommended to always use the plain for loop and cache the length property. The use of for in on an array is a sign of badly written code that is prone to bugs and bad performance."
    - It is highly recommended to only use the strict equality (===) operator.
  - better randomization library? http://simjs.com/random.html
- 3: figure out how to handle interrupted simulations
- 4: web workers? https://developer.mozilla.org/En/Using_web_workers
  - can spawn multiple workers in parallel. "transferable objects" would speed it up
- Robustness of javascript code
  - g.phase == 3 in league_views might introduce race condition
  - validate data from client?
  - make sure play menu doesn't ever get stuck

configuration in text file?
- http://flask.pocoo.org/docs/patterns/fabric/#the-configuration-file
- http://flask.pocoo.org/snippets/2/

roster
- highlight handle on hover, like button
- release
- buy out
  - send ajax to get the $ situation, then display appropriate modal dialog
- "Trade for" button in other teams' view

contract negotiation view
- bring back to either free agent view or resigning view after either accept or cancel

dashboard: a bunch of boxes showing..
- record
- playoff scenario
- history
- roster spots
- payroll
- expiring contracts
- top free agents
- league leaders
- team leaders

fix commented lines in bbgm.core.season

Game simulation:
- Robustness
  - only pop from schedule on completion
  - gracefully handle celery crash and restart
  - gracefully handle intermediate numbers of days
    - move to a more sensible calendar?
      - grep for num_days_played to see what it affects
- Stop
  - see saved SO question

refactor player.py

add years dropdown to all relevant views
- draft
  - make a view for past drafts (league_id/draft/2012)
  - display stats as in roster
  - but when current season is selected, use the current draft function to display either a warning or the active draft
- player ratings, eventually
- playoffs, eventually

speed it up
- somehow cache team (and/or player) dicts, so we don't need separate SQL queries all the time

play menu
- just send everything over one juggernaut connection per league?

Single page application
- When a simulation is done (or a player is signed, or whatever), the current page should be reloaded
- during page reloads or back/forward... what about handling deeper content in URLs? i.e., what box score is being viewed? what year? what stat is sorted? what page in rankings? etc.
- when a form uses redirect_or_json, the URL isn't updated. not sure what the best way to fix that is.

move to new window button, like gmail, that will open a view in a new window with a minimal UI

game log
- pushstate for individual box scores as well as teams and seasons, somehow?

history
- forward to awards view at the end of the year

play button requirements
- colors - is this a good idea?
  - green: move to new phase
  - blue: play games
  - red: other immediate action
- http://twitter.github.com/bootstrap/javascript.html#popovers for warnings on button!

organize imports

player view
- next, previous buttons (also active on left/right arrows)
- "trade for" button
- http://twitter.github.com/bootstrap/javascript.html#tabs
  - tab for playoff stats
  - tab for game log
  - tab for player ratings, eventually
- link to team roster

urls like http://flask.pocoo.org/docs/quickstart/#rendering-templates default to g.season
- make validate_season work correctly

include sidebar(s) showing all relevant information, plus make that stuff generated by a separate function so it can eventually be kept static as JS updates other content

grep for # links

how to start/manage all these services?
- supervisor
  - https://github.com/ask/celery/tree/master/contrib/supervisord/

security
- password hashing
  - http://packages.python.org/passlib/new_app_quickstart.html
- csrf protection
  - http://flask.pocoo.org/docs/security/#cross-site-request-forgery-csrf
  - http://packages.python.org/Flask-SeaSurf/
  - http://flask.pocoo.org/snippets/3/
  - even for ajax https://docs.djangoproject.com/en/1.2/releases/1.2.5/#csrf-exception-for-ajax-requests
- http://pypi.python.org/pypi/Flask-KVSession
- http://packages.python.org/Flask-Login/
- http://flask.pocoo.org/snippets/70/

roster_position
- what happened in pygobject version?
  - set automatically when season starts, or when league is created?
  - set after trade (auto) or signing (stick at bottom)

pep8
- https://github.com/hhatto/autopep8

logging
- should be more ubiquitous
- doesn't get saved to file inside celery task, but they do show up on the celeryd screen

next redirect like http://flask.pocoo.org/docs/reqcontext/?highlight=url#diving-into-context-locals
- http://flask.pocoo.org/snippets/62/

unit tests like https://github.com/mitsuhiko/flask/blob/master/examples/minitwit/minitwit_tests.py

playoffs
- on playoffs start, automatically switch to playoffs view
- before playoffs, show current playoff seedings

http://flask.pocoo.org/snippets/11/

# Then

self-contained game simulation code, to allow other people to hack on it easily. automatically make charts and stuff.



# BELOW IS OLD STUFF

Minor bugs:

Lottery should be for the 14 teams not in the playoffs, which isn't necessarily the same as the 14 worst teams.
Don't allow sort from first column of trade window

---

On release
- Update all version numbers (setup.py, README, about dialog box, save file, tables.sql (game_attributes), debian/changelog)
- Turn off debug mode

---
speed
- do simulations in C?

- unit tests
  - schedule

Separate files
- Each window/dialog gets its own glade file and own .py file in views folder
- initial build in each constructor DELETE THIS CRAP

Prettier UI: embed Webkit
- http://www.aclevername.com/articles/python-webgui/

when negotiating, players change values too much when you try to change years

pyflakes

======
FUTURE
======

GAMESIM
-------
overtime
take all ratings into account
blocks, assists (maybe other things) should not be so evenly distributed
home and away games
synergy
- Gameplay bonuses when any of the following are true...
  - At least one player with dribbling > X
  - At least two players with shooting_three_pointers > X
  - At least three players with shooting_three_pointers > X
  - At least four players with shooting_three_pointers > X
  - At least one player with rebounding > X
  - At least one player with blocks > X
  - At least three players with steals > X
  - At least one player with inside_scoring > X
  - At least three players with speed > X and (shooting_layups > X or shooting_layups + jumping > X)

UI
--
view any team in the roster window
    drop down box at the top with team names
    all actions disabled unless team_id == common.PLAYER_TEAM_ID
    open this window when a team is double-clicked on in the standings
customize which columns are displayed in treeviews - kiwi
treeview formatting
    str, int, float, currency, date, age - do formatting based on column type
progress bars
filtering should be done with treemodelfilter? - see pygtk tutorial
play menu
    even after hiding, accelerators still work, so on menuitem activation, check to make sure it's a valid choice!!!
        or: set accelerators in python code, not glade.  then i can reuse accelerators
ratings log tab on player window
some indication of synergy
toolbar to supplement the menubar
- New Open Save | Play (drop down menu) | Roster TeamHistory | Trade FreeAgents
league history
should trade window be a window or dialog?
update statusbar while game is saving/loading
player info window spawned from trade dialog and contract window should have clickable controls
- problem: a minimal example doesn't have this problem, so I don't know what's wrong
in team stats tab, allow toggle to show opponent stats

NBA
---
real salary cap rules: http://en.wikipedia.org/wiki/NBA_Salary_Cap
    released players should count against cap
real contract rules (max/min, etc.)
allow contracts that aren't the same $ every year
team and player options
releasing players - see the salary cap wiki page for complicated rule
luxury tax: (team_salary - 65mil) penalty if team salary is > 65mil
trading deadline

BACKEND
-------
archive stats as averages - this will make the end of season awards feasible, and make the stats view faster/easier
uncertainty in rating - for each player, calculate a randn(0, 3) with max/min of +/- 5
    calculate a new one each year and add it to 1/2 of the previous one
teams should be smart in resigning players (now it's just random)
use constants for phase #'s, other things.  maybe create a dict CONST in common.py?
    confirm that teams always have at least 5 players

AI (NON-GAMESIM)
----------------
trade
- mechanism similar to free_agent_times_asked to prevent prolonged negotiations
- AI teams trade with each other
- opponent GM trade AI based on their team's status: contending or rebuilding
- record player value for contending and rebuilding teams in player_attributes, so opposing GMs can more easily suggest trades (i.e. "i'll make the deal if you throw in X")
- Feedback from trades (way off, that's close, etc)
- "Oh, you again?" after failed trade attempts
- AI teams should be aware of contract lengths and the implications thereof
AI teams release/buy out players to sign a better free agent

FEATURES
--------
injuries
opponent GM trade AI based on their team's status: contending or rebuilding
change prices of tickets, concessions, etc
hire coaches to influence development
different sized cities with differently passionate fanbases - affects attendance and home court advantage
multi-team trades... how can i make a good UI for that?
advanced stats (+/-, PER, etc)
punishment for going in debt: if cash is less than $10M, can't sign any new contracts
advisors
trades
- draft picks
- cash
- drop players as part of trade, to free up roster space
