To acquire parity with the GTK version:

some way of local processing of game simulations?
- current idea: transfer schedule and all player ratings to client. simulate a days, keeping results and stats with the client. send the results and stats back to the server and save to database.
  - so, if it's only one day at a time, trades/signings/etc can still be done on the server and then synced to the client
    - although, this process should eventually be optimized
- web workers? https://developer.mozilla.org/En/Using_web_workers
  - can spawn multiple workers in parallel
  - "transferable objects" would speed it up
- if i do this, retain both options in parallel, so that a multiplayer game could be made with server-side simulations. javascript on server side? similar to juggernaut for message passing.. could have a "game simulation" server?
Game simulation framework
- celery + rabbitmq
  - should this run as another server, i guess?
- add games to queue and set games_in_progress lock
- also add a marker after every day's games to do the free agent and playoff checking as in bbgm.core.game.play
  - might need some extra work to make playoffs work, but don't worry about that now
- server-side python version
  - get game from queue, simulate, save results, update play status, repeat
- client-side javascript version
  - check if a client is connected to this league
  - if so, get game from queue, send to browser, save results, update play status, repeat
  - if not, pause all league's games until we get a signal from the browser for that league
- when queue is empty for a league, remove the games_in_progress lock

global lock: only one game simulation (draft, contract negotiation, ...) at a time

play button requirements
- show current immediate options
  - play X days
  - Negotiate
  - Move to next phase
  - ALL OF THESE THINGS SHOULD HAVE GLOBAL LOCKING
- colors:
  - green: move to new phase
  - blue: play games
  - red: other immediate action
- move to top bar?
- when phase changes, change the play button (for now, just list all possible options, like defined in Glade)

Single page application
- Within a league, just load the internal bit. Outside of that, keep everything (play menu, dashboard) updated by Juggernaut
- When a simulation is done (or a player is signed, or whatever), the current page should be reloaded, maintaining state as best possible
- Issues
  - How can I use the same jinja2 templates, since they need to extend the higher level layout files (or not)
  - What about updating the title and other sections?
    - is there a way, with jinja2, to get all of the blocks in JSON?
one js file with all my stuff?
- what about things that are run only once on one page? put them in a function and call that from the page?

playoffs

draft

free agents

resign players at end of season
- Play button changes to "Resign free agents"
- link brings you to a page listing only your free agents, and explaining that this is your chance to sign them before they become available to the whole league
- besides that notice, this should work like the normal free agents page

urls like http://flask.pocoo.org/docs/quickstart/#rendering-templates default to g.season
- make validate_season work correctly

fix commented lines in:
- bbgm.core.season

set title based on phase

include sidebar(s) showing all relevant information, plus make that stuff generated by a separate function so it can eventually be kept static as JS updates other content

grep for # links

security
- password hashing
  - http://packages.python.org/passlib/new_app_quickstart.html
- csrf protection
  - http://flask.pocoo.org/docs/security/#cross-site-request-forgery-csrf
  - even for ajax https://docs.djangoproject.com/en/1.2/releases/1.2.5/#csrf-exception-for-ajax-requests
- http://pypi.python.org/pypi/Flask-KVSession
- http://packages.python.org/Flask-Login/

next redirect like http://flask.pocoo.org/docs/reqcontext/?highlight=url#diving-into-context-locals

unit tests like https://github.com/mitsuhiko/flask/blob/master/examples/minitwit/minitwit_tests.py








# BELOW IS OLD STUFF

Minor bugs:

Lottery should be for the 14 teams not in the playoffs, which isn't necessarily the same as the 14 worst teams.
Don't allow sort from first column of trade window

---

On release
- Update all version numbers (setup.py, README, about dialog box, save file, tables.sql (game_attributes), debian/changelog)
- Turn off debug mode

---
speed
- do simulations in C?

- unit tests
  - schedule

Separate files
- Each window/dialog gets its own glade file and own .py file in views folder
- initial build in each constructor DELETE THIS CRAP

Prettier UI: embed Webkit
- http://www.aclevername.com/articles/python-webgui/
- first try for box score
  - how to make HTML links do external stuff
  - total rebounds
  - starters/bench distinction {% if forloop.counter == 5 %} separator{% endif %}
- then for standings
- then status/summary toolbar/sidebar
  - team
  - record
  - standings
  - finances: annual profit/loss, total cash/debt
  - history: total record, playoffs, championships, all star appearances, hall of fame selections
- Use theme settings for fonts and colors
  - https://wiki.ubuntu.com/Quickly/Snippets "Get Gtk+ theme colors"


Player window and game log list should be sped up by not checking the old (static) rows

when negotiating, players change values too much when you try to change years
when you press close and the save/nosave/cancel dialog comes up, it should warn you about the save if you press save

continue factoring out game logic from views to core

pyflakes

======
FUTURE
======

GAMESIM
-------
overtime
take all ratings into account
blocks, assists (maybe other things) should not be so evenly distributed
home and away games
synergy
- Gameplay bonuses when any of the following are true...
  - At least one player with dribbling > X
  - At least two players with shooting_three_pointers > X
  - At least three players with shooting_three_pointers > X
  - At least four players with shooting_three_pointers > X
  - At least one player with rebounding > X
  - At least one player with blocks > X
  - At least three players with steals > X
  - At least one player with inside_scoring > X
  - At least three players with speed > X and (shooting_layups > X or shooting_layups + jumping > X)

UI
--
view any team in the roster window
    drop down box at the top with team names
    all actions disabled unless team_id == common.PLAYER_TEAM_ID
    open this window when a team is double-clicked on in the standings
customize which columns are displayed in treeviews - kiwi
treeview formatting
    str, int, float, currency, date, age - do formatting based on column type
progress bars
filtering should be done with treemodelfilter? - see pygtk tutorial
play menu
    even after hiding, accelerators still work, so on menuitem activation, check to make sure it's a valid choice!!!
        or: set accelerators in python code, not glade.  then i can reuse accelerators
ratings log tab on player window
rapidly clicking and unclicking a player's checkbox on the trade window shouldn't open the player's info window
some indication of synergy
toolbar to supplement the menubar
- New Open Save | Play (drop down menu) | Roster TeamHistory | Trade FreeAgents
league history
should trade window be a window or dialog?
update statusbar while game is saving/loading
player info window spawned from trade dialog and contract window should have clickable controls
- problem: a minimal example doesn't have this problem, so I don't know what's wrong
in team stats tab, allow toggle to show opponent stats

NBA
---
real salary cap rules: http://en.wikipedia.org/wiki/NBA_Salary_Cap
    released players should count against cap
real contract rules (max/min, etc.)
allow contracts that aren't the same $ every year
team and player options
releasing players - see the salary cap wiki page for complicated rule
luxury tax: (team_salary - 65mil) penalty if team salary is > 65mil
trading deadline

BACKEND
-------
archive stats as averages - this will make the end of season awards feasible, and make the stats view faster/easier
uncertainty in rating - for each player, calculate a randn(0, 3) with max/min of +/- 5
    calculate a new one each year and add it to 1/2 of the previous one
teams should be smart in resigning players (now it's just random)
use constants for phase #'s, other things.  maybe create a dict CONST in common.py?
    confirm that teams always have at least 5 players

AI (NON-GAMESIM)
----------------
trade
- mechanism similar to free_agent_times_asked to prevent prolonged negotiations
- AI teams trade with each other
- opponent GM trade AI based on their team's status: contending or rebuilding
- record player value for contending and rebuilding teams in player_attributes, so opposing GMs can more easily suggest trades (i.e. "i'll make the deal if you throw in X")
- Feedback from trades (way off, that's close, etc)
- "Oh, you again?" after failed trade attempts
- AI teams should be aware of contract lengths and the implications thereof
AI teams release/buy out players to sign a better free agent

FEATURES
--------
injuries
opponent GM trade AI based on their team's status: contending or rebuilding
change prices of tickets, concessions, etc
hire coaches to influence development
different sized cities with differently passionate fanbases - affects attendance and home court advantage
multi-team trades... how can i make a good UI for that?
advanced stats (+/-, PER, etc)
punishment for going in debt: if cash is less than $10M, can't sign any new contracts
advisors
trades
- draft picks
- cash
- drop players as part of trade, to free up roster space
