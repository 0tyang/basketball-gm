MAIN PLAN:
build init_db equivalent with indexeddb
port enough code over to create a new league. is it ridiculously slow? NO!
if not, port enough code over to simulate games. is it ridiculously slow?
- port over game.py and make it work more like it used to (just call a function and have it loop through the days, rather than this weird callback thing)
- Get teams list with all of the teams playing today
- in the play function (not separate team function) load teams async
- Callback to simulate a day's games
- Callback to do daily bookkeeping
- all these callbacks are kind of similar to the old AJAX requests

IF NOT, THEN:
refactor and make sure i'm doing things correct as far as modules, namespaces, documentation, style, etc.
async shit is confusing. how to avoid race conditions while maintaining modular code?
- dead simple example: I have a function somewhere that connects to a database. Later, somewhere else in the code, I want to use the database. How do I know if there's a connection? What do I do if there isn't one, do I wait? How?
port over other features
auto translate python to js?
coffeescript?

---

How should I handle in-league database? One big transaction?

---

player.js

can i make Player.save save both ratings for updated players, and ratings+attributes for new players?

merge Player.develop and GeneratePlayer.develop

dbl.transaction(["players"]).objectStore("players").get(1).onsuccess = function(event) { console.log(event.target.result) };

---

test deep index stats.tid, stats.season: {pid, stats: {tid, season, pts, reb, ...}}

League schema: teamStats and playerStats refer to totals that will be divided by numGames to get averages

players = {playerAttributes, ratings: {playerRatings}, stats: {season, playoffs=Bool, numGames, playerStats}}
Index: *pid, tid, ratings.season, stats.tid, stats.season, stats.playoffs

teams = {teamAttributes, numGames, stats: {playoffs=Bool, teamStats}}
Index: tid, cid, did, season, stats.playoffs

games =  {gid, season, teamStatsForIndividualGame, playerStatsForIndividualGam}
Index: *gid, tid, season
- can tid be an array so that gid can be unique? can i index on an array?

schedule = {schedule}

conferences, divisions = simple global data structures

Querying based on multiple indexes: https://github.com/philikon/queryIndexedDB
Try that first, as it looks simple. If it doesn't work, try: http://linq2indexeddb.codeplex.com/ http://www.kristofdegrave.be/2012/05/using-linq-to-indexed-db.html
CAN EITHER OF THESE HANDLE JOINS? Intersection and Union in the first, what about second?

var teamStore = dbm.transaction("teams").objectStore("teams");
request = Index('did').eq(2).getAll(teamStore)
request.onsuccess = function (event) {
    console.log(request.result);
}

var dbConfig = {};
dbConfig.version = 1;
var db = window.linq2indexedDB("meta", dbConfig, true);
db.linq.from("leagues").select().then(function(data){
	console.log("Selected " + data.length + " items");
	console.log(data);
});

---

update: http://www.javasscrypt.com/html5/web-sql-db-vs-indexeddb/
tranasctions: http://blog.nparashuram.com/2011/11/indexeddb-apis-javascriptnext.html        http://stackoverflow.com/questions/10484965/how-can-i-put-several-requests-in-one-transaction-in-indexeddb
joins: http://blog.oharagroup.net/post/16394604653/a-performance-comparison-websql-vs-indexeddb        http://hacks.mozilla.org/2010/06/comparing-indexeddb-and-webdatabase/

handlebars templates -f js/templates.js

On page load:
- load main wrapper template and display
- load league internal wrapper but don't display
- if within league and internal league wrapper not displayed, display it
- display content from view (title, content, league_content)
  - do this within the view functions. have a function they call, passing a hash with keys matching blocks, and then have that function update the page

TODO:
only pushstate in ajax_update if this is a new URL (not the current URL)
only need handlebars.runtime.js
merge game_attributes into league table of meta database
race contition on "Create New League" button?
