CURRENT PRIORITIES
------------------

bbgmPing should only work in production
  no "test" in url
  basketball-gm.com in url
jslint errors
  currently just "Don't make functions within a loop." which should all be fixed eventually
give bbgm website its own version of bootstrap (only with components needed)
display league/season counter on basketball-gm.com splash page
js/templates/helpers.js
  handlebars helper functions should call util.helpers for any heavy lifting or duplication
  rename to util/templateHelpers
  make into real requirejs module?
league dashboard
  next game should show something when active in playoffs, a message at least
more unit tests
  error cases for league.create - invalid inputs, etc
player.addStatsRow
  season parameter wouldn't be needed if g.season was already set. Set g.season early, then.

BEFORE 3.0.0
------------

database changes
  KEEP TRACK OF THESE
  fan engagement
    0.1-1, a multiplier on how many fans attend each game
    increase when the team's performance increases
    decrease a little when performance decreases
    decrease a lot 
  negotiation is annoying
    come up with an "anger meter" to display the odds of the player demanding more
      initialize with some value based on if it's a resigning or not, and wins the previous season
    shouldn't be so aggressive/adversarial
    make calculation of demand to display DRY - or any change, be careful
  store contract history/future with each player, and show in player view
  store a list of awards/honors with each player
  add activeYears multientry like statsTids use for:
    league leaders
    stats
    ratings
  cache payroll each year?
    cache at the end of the playoffs
    update cached value for this year whenever it changes
      player is signed
      trade happens
      player is bought out
      player is released
    would simplify db.getTeams
    would allow historical finances view
    but is it worth it? would the cached values be meaningful?
  message from the owner every year
    warning about being fired, or congratulations
  big picture gameplay
    some way to actually lose the game
      get fired by owner if X
    final score, hall of fame
    difficulty level from 1-10, which influences..
      starting $
      starting roster
      fan engagement
        all of the above should be functions of the city's population!
      also, final score
gameSim
  home/away advantage
    make sure home/away in playoffs is set right
  rename compositeRating to compositeRatings (or something better)
    other plural issues in gameSim
  playing time not adding up to 240?
  do some kind of profiling, see if i can speed it up
    any way to speed up PER? maybe break it up into smaller functions so they can be profiled
    do i need all the player composite ratings?
    do i need all the team composite ratings?
    how does performance change/degrade as the years go on?
contract negotiation
  test all the error conditions and make sure callbacks are appropriately called (unit tests?)
  add free agent to the end of roster
player stats
  how to handle aggregating stats for players who played for more than one team in a season? add them all up in ps in db.getPlayers
db.getPlayers
  rename to helpers.filterPlayers?
    make db.getTeams consistent with this
  use for other access of players "playersAll"
  the special case attributes should generally be moved directly into the database.
Replace showNoStats with a check of stats.length in db.getPlayer, at least in some cases? API is messy
trade refactoring
  validateSavedTids crap should be in trade.js.
  trade.summary stuff should be automatic and stored in tradeStore
DataTables - need to rethink a lot of this, particularly how to make a decent UI
  sorting of team name column in finances view is fucked up
  http://datatables.net/extras/ such as scroller, colreorder, colvis, ...
  add team dropdown to ratings and stats views - but should this refresh the view, or just filter the DataTable?
    could use something like http://www.datatables.net/extras/thirdparty/ColumnFilterWidgets/DataTables/extras/ColumnFilterWidgets/ to also filter on positions
  per 36 stats in team/player stats view
    add a dropdown (maybe make the dropdown handling code more general?)
    add an option to db.getPlayers
  fix default sort order on column click
    http://datatables.net/ref#asSorting will work. maybe pass it as an option to bbgm_datatable
    text should be asc, numeric should be desc
    http://stackoverflow.com/questions/3725321/jquery-datatables-change-order-to-desc-when-it-sorts - but can it be set globally? maybe i can have ui.datatable automatically read columns and figure it out?
league leaders
  minimum minutes played to show?
  also, somehow make a toggle to apply this criteria to season stats
commas for thousands
  number of games played in delete league view
  attendance in finances
  attendance in league dashboard
money display
  -$, not $-. Might need a new handlebars function to do this
  conditional formatting to show negative dollars in red
    https://www.google.com/search?q=site%3Adatatables.net+conditional+formatting&ie=utf-8&oe=utf-8&client=ubuntu&channel=fs
    finances
    league dashboard
internationalization
  league dashboard rankings should say 1st, 2nd, 3rd rather than 1th, 2th, 3th
  http://requirejs.org/docs/api.html#i18n
playoff stats in player view
  need a way to request only playoff stats from db.getPlayers - see all the playoffs === false stuff
in lock functions, update g from database before using any potentially sensitive values
  or should these g.whatever variables be set at all if they're sensitive? lid doesn't change obviously, but the others?
move to new window button, like gmail, that will open a view in a new window with a minimal UI
  only the icon should be clickable, not the area above and below
team history view needs more love
  dropdown for other teams
auto-add players when AI teams are below limit (in season.js)
AI modules that contain functions which are called to determine if players are resigned, etc.
notifications (and log) from top right to display log of key events
  game results from user's team
  players retiring from user's team
  league champions
  trades
  free agent signings
show an option to upload a data file for rosters
  nba roster
    define file format for external player sources
    derive from stats, somehow?
    nba player potential ratings
    if necessary, scale everything down a bit to make it comparable to normal players
    free agents are way overrated. is this roster file legit?
should all this stuff be always in g, or read dynamically from the database?
player finder
  search by stats or ratings
  trade for button, or sign button if free agent
free agent error message "You cannot initiate a new negotiaion while game simulation is in progress or a previous contract negotiation is in process." - is this actually displayed?
trading block
eliminate jquery UI dependency? it's only used for roster reordering currently
customize which columns are shown in roster view (and possibly other summary views like trade, free agent, etc)
PER
  shouldn't be recalculated for everyone in the playoffs, only active teams' players (also in the regular season, but that's less important)
    maybe have a flag set when a player plays a game, that advanced stats need to be recalculated
  slow, particularly after multiple seasons?
  how to deal with players traded mid-season?
    reevaluate this in general. stats don't seem to be showing after a trade in roster view and player view.
  use for awards, contracts
some UI showing the state of the team's synergy. maybe like an advisors screen that suggests what kind of player is needed to improve synergy
bootstrap 2.3
show record (w-l) on roster view - make it more like a summary, as in basketball-reference
  playoff results
  payroll
  anything else?
https://github.com/nprapps/app-template
disabling button for new league
  https://github.com/olivernn/davis.js/issues/63 firefox/chrome issues
  onclick="this.disabled=true; this.innerHTML='Generating league...'; $(this.form).submit();"
    this submits the form twice. why?
race conditions associated with callbacks when passing around transactions
  any put/add/update does not guarantee it's finished until the transaction finishes. but letting transactions finish is slow.
more handlebars helpers for things like...
  team dropdown
  season dropdown
too easy to do the "be bad, get draft picks, keep payroll low, sign free agents, be good" pattern
  draft lottery
    do a dramatic presentation?
  minimum payroll, to make really bad teams not economically viable
  free agents are less willing to sign with bad teams
  user can't just sign all the free agents before AI teams

FUTURE (after 3.0.0)
--------------------

more sophisticatedrealtime data binding/updating
  ember.js
    data binding
    uses handlebars
  knockoutjs is too flaky. try just a naive approach first, and use something better later
  angularjs
    seems nice and widely used. would need to build some kind of signal system on top of this, basically to update the UI data variables from indexeddb when appropriate
Web workers
  don't seem to actually help performance. maybe help responsiveness
  benchmark?
  would it be worth it to parallelize advstats?
boxplots for shot location stats, plus comparison to NBA data
import/export stuff
  online "locker" that you can sync saved games to
  https://unhosted.org/adventures/7/Adding-remote-storage-to-unhosted-web-apps.html
  data urls don't work with more than ~1 MB. downloadifydoesn't seem to work with more than several MBs of data. until a better solution comes (online sync?), wait.
  league names
    "Edit" button between "Export" and "Delete" - set in leaguesStore and gameAttributes
      move delete/edit/export under one button, "manage". have the 3 buttons pop out in place when you hit manage, then it functions as it does now. popped buttons can be colored too, then
  import league
    ignore old lid
other advanced stats
  WS - http://www.basketball-reference.com/about/ws.html requires Basketball on Paper - http://www.sports-reference.com/cbb/about/ws.html is simpler
  +/- and other stats needed to calculate above - track in game
  APM?
hitting the phase twice shouldn't be possible. but if i, for instance, hit "until preseason" twice quickly, i skip a year
  maybe have something like lock.phaseChangeInProgress? but some timeout would be needed to reset
worth it to switch to closure library? http://stackoverflow.com/questions/10782612/what-is-the-sturdiest-way-to-get-the-closure-compilers-type-safety-together-wit
roster size check on new season
  cpu teams with < 5 players should automatically sign free agents

---

g.dbl.transaction("players").objectStore("players").get(476).onsuccess = function (event) { console.log(event.target.result); };

g.dbl.transaction("gameAttributes").objectStore("gameAttributes").getAll().onsuccess = function (event) { console.dir(event.target.result); };

---






# Pre-JavaScript TODO

player view
  next, previous buttons (also active on left/right arrows)
  link to team roster if player is on a team
  for retired players, either don't show ratings, or show ratings from best year

roster
  highlight handle on hover, like button
  "trade for" only sensitive when trades are allowed

Client-side game simulation
  Robustness of javascript code
    g.phase == 3 in league_views might introduce race condition
    validate data from client?
    make sure play menu doesn't ever get stuck - some kind of timeout

play button requirements
  colors - is this a good idea?
    green: move to new phase
    blue: play games
    red: other immediate action

make validate_season work correctly

include sidebar(s) showing all relevant information, plus make that stuff generated by a separate function so it can eventually be kept static as JS updates other content

grep for # links: grep -R --include="*.html" '<a href="#">' .

security
  csrf protection
    http://flask.pocoo.org/docs/security/#cross-site-request-forgery-csrf
    http://packages.python.org/Flask-SeaSurf/
    http://flask.pocoo.org/snippets/3/
    even for ajax https://docs.djangoproject.com/en/1.2/releases/1.2.5/#csrf-exception-for-ajax-requests

playoffs
  on playoffs start, automatically switch to playoffs view

# Then

trades
  allow trades that go over roster limit, but require players to be cut or traded to meet limit before game simulation continues

self-contained game simulation code, to allow other people to hack on it easily. automatically make charts and stuff.

warning when window is closed and game simulation is in progress
  http://stackoverflow.com/questions/1244535/alert-when-browser-window-closed-accidentally
  https://developer.mozilla.org/en/DOM/window.onbeforeunload

abstract opposing team AI: make it a class with various methods to determine actions at different time points

game log
  pushstate for individual box scores as well as teams and seasons, somehow?

# BELOW IS OLD STUFF

Minor bugs:

Lottery should be for the 14 teams not in the playoffs, which isn't necessarily the same as the 14 worst teams.
Don't allow sort from first column of trade window

---

======
FUTURE
======

GAMESIM
-------
take all ratings into account
  energy, etc
blocks, assists (maybe other things) should not be so evenly distributed
home and away games

UI
--
in team stats tab, allow toggle to show opponent stats

NBA
---
real salary cap rules: http://en.wikipedia.org/wiki/NBA_Salary_Cap
real contract rules (max/min, etc.)
allow contracts that aren't the same $ every year
team and player options
releasing players - see the salary cap wiki page for complicated rule
luxury tax: (team_salary - 65mil) penalty if team salary is > 65mil
trading deadline

BACKEND
-------
archive stats as averages - this will make the end of season awards feasible, and make the stats view faster/easier
uncertainty in rating - for each player, calculate a randn(0, 3) with max/min of +/- 5
    calculate a new one each year and add it to 1/2 of the previous one
teams should be smart in resigning players (now it's just random)
use constants for phase #'s, other things.  maybe create a dict CONST in common.py?
    confirm that teams always have at least 5 players

AI (NON-GAMESIM)
----------------
trade
  mechanism similar to free_agent_times_asked to prevent prolonged negotiations
  AI teams trade with each other
  opponent GM trade AI based on their team's status: contending or rebuilding
  record player value for contending and rebuilding teams in player_attributes, so opposing GMs can more easily suggest trades (i.e. "i'll make the deal if you throw in X")
  Feedback from trades (way off, that's close, etc)
  "Oh, you again?" after failed trade attempts
  AI teams should be aware of contract lengths and the implications thereof
AI teams release/buy out players to sign a better free agent

FEATURES
--------
injuries
opponent GM trade AI based on their team's status: contending or rebuilding
change prices of tickets, concessions, etc
hire coaches to influence development
different sized cities with differently passionate fanbases - affects attendance and home court advantage
multi-team trades... how can i make a good UI for that?
advanced stats (+/-, PER, etc)
punishment for going in debt: if cash is less than $10M, can't sign any new contracts
advisors
trades
  draft picks
  cash
  drop players as part of trade, to free up roster space
